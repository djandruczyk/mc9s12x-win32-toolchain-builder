#!/bin/bash
# Making FreeEMS Crosstools for windows from linux:
#
# David J. Andruczyk, 2010
#
# This REQUIRES that you have dpkg-dev,texinfo mingw32, mingw32-binutils and 
# mingw32-runtime installed and working. (preferrable from the vendor
# repos and not from source as the paths will be different breaking '
# the cross/uncross cripts)
#

# ADJUST THIS TO SUIT
# NOTE: you'll also need to edit FreeEMS-toolchain.iss to suite your 
# wine configuration and target paths, if you use "all" or "buildpkg"

CWD=$(pwd)

DSTDIR=${CWD}/toolchain

#Additonal Pakages needed to be added..
PKGS="bc-1.06-2-bin.zip coreutils-5.3.0-bin.zip coreutils-5.3.0-dep.zip make-3.81-bin.zip zlib-1.2.3-bin.zip libintl-0.14.4-bin.zip"



function build_s12x_binutils_direct {
# Make sure we don't have cross vars set to begin with
. ${CWD}/uncross
# Setup crosscompile env vars:
# First: build binutils for 9s12x
#pushd ${CWD}/FreeScale-s12x-binutils 
if [ -f mc9s12x-direct-build/GOOD ] ; then
	return 0
fi
if [ -d mc9s12x-direct-build ] ; then
	rm -rf mc9s12x-direct-build
fi
mkdir mc9s12x-direct-build 
pushd mc9s12x-direct-build 
# GCC needs a direct linux->m68hc11 assembler for its canadian cross
# intermediary compiler, so we need to build binutils twice, once for 
# Linux->m68hc11, and once as a crossbuild win32->m68hc11
# First linux->m68hc11
${CWD}/FreeScale-s12x-binutils/binutils-2.20/configure --target=m68hc11 --enable-targets=m68hc11,m68hc12,mc9xgate --program-prefix=m68hc11- --disable-nls --prefix=${DSTDIR}/intermediary && \
make && \
make install && \
popd
if [ $? -eq 0 ]; then
	touch mc9s12x-direct-build/GOOD
	return 0
else
	return $?
fi
}

function build_s12x_binutils_cross {
# Now enable cross compile env vars and build the windows binaries
if [ -f mc9s12x-cross-build/GOOD ] ; then
	return 0
fi
if [ -d mc9s12x-cross-build ] ; then
	rm -rf mc9s12x-cross-build
fi
mkdir mc9s12x-cross-build 
pushd mc9s12x-cross-build 
. ${CWD}/cross
${CWD}/FreeScale-s12x-binutils/binutils-2.20/configure --build=i686-pc-linux-gnu --host=i586-mingw32msvc  --target=m68hc11 --enable-targets=m68hc11,m68hc12,mc9xgate --disable-nls --program-prefix=m68hc11- --prefix=${DSTDIR} && \
make  && \
make install && \
popd
if [ $? -eq 0 ]; then
	touch mc9s12x-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_mc9xgate_binutils_cross {
# Make Xgate version, no need to make intermediary for xgate as there is NOT
# yet a GCC for xgate
if [ -f mc9xgate-cross-build/GOOD ] ; then
	return 0
fi
if [ -d mc9xgate-cross-build ] ; then
	rm -rf mc9xgate-cross-build
fi
mkdir mc9xgate-cross-build 
pushd mc9xgate-cross-build 
. ${CWD/cross
}
${CWD}/FreeScale-s12x-binutils/binutils-2.20/configure --build=i686-pc-linux-gnu --host=i586-mingw32msvc --target=mc9xgate --enable-targets=mc9xgate --program-prefix=mc9xgate- --disable-nls --prefix="$DSTDIR" && \
make && \
make install && \
popd && \
. ${CWD}/uncross
if [ $? -eq 0 ]; then
	touch mc9xgate-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_intermediary_gcc {
if [ -f gcc-intermediary-build/GOOD ] ; then
	return 0
fi
if [ -d gcc-intermediary-build ] ; then
	rm -rf gcc-intermediary-build
fi
mkdir gcc-intermediary-build
pushd gcc-intermediary-build
OLDPATH=$PATH
export PATH=$DSTDIR/intermediary/bin:$PATH
# GCC needs to be done twice.  Once as a native linux->m68hc11 compiler, and 
# then as a cross compiled win32->m68hc11 compiler, which depends on the 
# intermediary one being present, so build that one first
${CWD}/gcc-m68hc1x-3.3.6+3.1+dfsg/gcc-3.3.6/configure --target=m68hc11 --program-prefix=m68hc11- --disable-nls --disable-multilib --enable-languages=c --prefix="$DSTDIR"/intermediary && \
make &&
make install && \
export PATH=$OLDPATH && \
popd
if [ $? -eq 0 ]; then
	touch gcc-intermediary-build/GOOD
	return 0
else
	return $?
fi
}


function build_cross_gcc {
. $CWD/cross
if [ -f gcc-cross-build/GOOD ] ; then
	return 0
fi
if [ -d gcc-cross-build ] ; then
	rm -rf gcc-cross-build
fi
mkdir gcc-cross-build
pushd gcc-cross-build
# GCC needs to be done twice.  Once as a native linux->m68hc11 compiler, and 
# then as a cross compiled win32->m68hc11 compiler, which depends on the 
# intermediary one being present, so build that one first
OLDPATH=$PATH
export PATH=$DSTDIR/intermediary/bin:$PATH
${CWD}/gcc-m68hc1x-3.3.6+3.1+dfsg/gcc-3.3.6/configure --build=i686-pc-linux-gnu --host=i586-mingw32msvc --target=m68hc11 --program-prefix=m68hc11- --disable-nls --disable-multilib --enable-languages=c  --prefix="$DSTDIR" && \
# FIX BUG in gcc 3.3.6 regarding canadian crosses
pushd i686-pc-linux-gnu && \
ln -sf ${CWD}/gcc-m68hc1x-3.3.6+3.1+dfsg/gcc-3.3.6/include/ && \
popd  && \
make && \
make install && \
. $CWD/uncross && \
export PATH=$OLDPATH && \
popd
if [ $? -eq 0 ]; then
	touch gcc-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_direct_newlib {
#Now newlib
#RESET ENV VARS back to normal, as newlib sets things up its own way
. $CWD/uncross
if [ -f newlib-build/GOOD ] ; then
	return 0
fi
if [ -d newlib-build ] ; then
	rm -rf newlib-build
fi
mkdir newlib-build
OLDPATH=$PATH
export PATH=$DSTDIR/intermediary/bin:$PATH
pushd newlib-build && \
${CWD}/newlib-1.18.0/configure --build=i686-pc-linux-gnu --target=m68hc11 --disable-multilib --with-newlib --disable-shared --disable-threads --disable-nls --prefix="$DSTDIR" && \
make  && \
make install && \
export PATH=$OLDPATH && \
popd
if [ $? -eq 0 ]; then
	touch newlib-build/GOOD
	return 0
else
	return $?
fi
}


function build_toolchain {
# Make a clean TARGET location to stick everything
if [ ! -d "$DSTDIR" ]; then
	mkdir "$DSTDIR"
else
	echo "$DSTDIR ALREADY EXISTS, this may not be what you want!!!"
	sleep 5
fi
echo "Target is ${DSTDIR}"	
build_s12x_binutils_direct
res=$?
binutils_direct_hcs12x_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure directly compiling hcs12x binutils, result code %i\n" $res)
fi
build_s12x_binutils_cross
res=$?
binutils_cross_hcs12x_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling hcs12x binutils, result code %i\n" $res)
fi
build_mc9xgate_binutils_cross
res=$?
binutils_cross_mc9xgate_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling mc9xgate binutils, result code %i\n" $res)
fi

build_intermediary_gcc
res=$?
gcc_direct_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure direct compiling intermediary GCC for canadian cross, result code %i\n" $res)
fi

build_cross_gcc
res=$?
gcc_cross_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling GCC, result code %i\n" $res)
fi

build_direct_newlib
res=$?
newlib_direct_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure direct compiling newlib, result code %i\n" $res)
fi

echo "
	Compilation Results:
	Direct Binutils Linux->hc11: $binutils_direct_hcs12x_res
	Cross Binutils Win32->hc11:  $binutils_cross_hcs12x_res
	Cross Binutils Win32->xgate: $binutils_cross_mc9xgate_res
	Direct GCC Linux->hc11:      $gcc_direct_res
	Cross GCC Win32->hc11:       $gcc_cross_res
	Direct Newlib Linux->hc11:   $newlib_direct_res

		"

if [ $binutils_direct_hcs11x_res -eq 0 ] && \
	[ $binutils_cross_hcs11x_res -eq 0 ] && \
	[ $binutils_cross_mc9xgate_res -eq 0 ] && \
	[ $gcc_direct_res -eq 0 ] && \
	[ $gcc_cross_res -eq 0 ] && \
	[ $newlib_direct_res -eq 0 ] ; then
	echo "Everything compiled OK, installing prepackaged windows binaries"
	add_win32_pkgs
fi
}

function cleanup {
	echo "Cleaning out build directories"
	clean_binutils
	clean_gcc
	clean_newlib
	echo "All build dirs cleaned out"
}

function full_cleanup {
	echo "Cleaning out sources and build directories"
	clean_binutils
	clean_gcc
	clean_newlib
	clean_zips
	clean_gcc_sources
	clean_newlib_sources
	clean_binutils_sources
	clean_dest
	rm -f $CWD/FreeEMS-toolchain.iss
	rm -f $CWD/BSTAMP
	echo "All source and build dirs cleaned out"
}

function download_win32 {
	echo "Downloading windows binaries from sourceforge"
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/bc/1.06-2/bc-1.06-2-bin.zip/download -O  bc-1.06-2-bin.zip
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-bin.zip/download -O  zlib-1.2.3-bin.zip
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/coreutils/5.3.0/coreutils-5.3.0-bin.zip/download -O  coreutils-5.3.0-bin.zip
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/coreutils/5.3.0/coreutils-5.3.0-dep.zip/download -O  coreutils-5.3.0-dep.zip
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/libintl/0.14.4/libintl-0.14.4-bin.zip/download -O  libintl-0.14.4-bin.zip
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/make/3.81/make-3.81-bin.zip/download -O  make-3.81-bin.zip
	echo "Complete!"
}

function clean_binutils {
	if [ -d mc9s12x-direct-build ] ; then
		rm -rf mc9s12x-direct-build
	fi
	if [ -d mc9s12x-cross-build ] ; then
		rm -rf mc9s12x-cross-build
	fi
	if [ -d mc9xgate-cross-build ] ; then
		rm -rf mc9xgate-cross-build
	fi
}

function clean_binutils_sources {
	rm -rf ${CWD}/FreeScale*
}

function dl_binutils {
	# checkout seank's FreeScale-s12x-binutils
	echo "Cloning binutils git tree locally"
	if [ ! -d FreeScale-s12x-binutils ] ; then
		git clone http://github.com/seank/FreeScale-s12x-binutils.git 
	fi
	pushd FreeScale-s12x-binutils
	git log --date=short |grep Date |head -n1 |awk '{print $2}' > "$CWD/BSTAMP"
	popd
}

function clean_gcc {
	# I used the sources from gcc-m68hc1x from ubuntu/debian
	if [ -d gcc-intermediary-build ] ; then
		rm -rf gcc-intermediary-build
	fi
	if [ -d gcc-cross-build ] ; then
		rm -rf gcc-cross-build
	fi
}

function clean_gcc_sources {
	rm -rf ${CWD}/gcc*
}

function dl_gcc {
	echo "Downloading GCC source"
	if [ ! -f gcc-m68hc1x_3.3.6+3.1+dfsg-3.dsc ] ; then
		apt-get -d source gcc-m68hc1x
	fi
	if [ ! -d gcc-m68hc1x-3.3.6+3.1+dfsg ] ; then
		dpkg-source -x gcc-m68hc1x_3.3.6+3.1+dfsg-3.dsc
		pushd gcc-m68hc1x-3.3.6+3.1+dfsg 
		tar xvfj gcc-3.3.6.tar.bz2 && \
		pushd gcc-3.3.6 
		cat ../gcc-3.3.6-m68hc1x-20060122.diffs |patch -p1 
		popd
		popd
	fi
}

function clean_newlib {
	# I used the sources from newlib-m68hc1x from ubuntu/debian
	if [ -d newlib-build ] ; then
		rm -rf newlib-build
	fi
}

function clean_newlib_sources {
	rm -rf ${CWD}/newlib*
}

function clean_dest {
	rm -rf ${DSTDIR}
}

function dl_newlib {
	# I used the sources from newlib-m68hc1x from ubuntu/debian
	echo "Downloading newlib source"
	apt-get source newlib-source 
}

function clean_zips {
	rm -f $CWD/*.zip
}

function add_win32_pkgs {
	pushd $DSTDIR
	for pkg in $PKGS ; do
		unzip -o $CWD/$pkg
	done
	rm -rf contrib manifest
	popd
}

function build_win32_pkg {
	if [ -f FreeEMS-toolchain.iss ] ; then
		rm -f FreeEMS-toolchain.iss
	fi
	DEST=$(echo $DSTDIR |sed -e 's/\//\\\\/g')
	BSTAMP=$(cat $CWD/BSTAMP)
	sed -e s,_DSTDIR_,$DEST,g  -e s,_BSTAMP_,$BSTAMP,g < FreeEMS-toolchain.iss.in > FreeEMS-toolchain.iss
	ISS_FILE=dave/git/FreeEMS-win32-toolchain-builder/FreeEMS-toolchain.iss
	DRIVE=L

	wine ~/.wine/drive_c/Program\ Files/Inno\ Setup\ 5/ISCC.exe "${DRIVE}":/"${ISS_FILE}"
	mv $CWD/Output/setup.exe $CWD/Output/FreeEMS_ToolChain-$BSTAMP.exe
}

function warn_user {
	echo ""
	echo $*
	echo ""
	exit -1

}
function done_all {
	echo "

				ALL DONE!!!
FreeEMS_ToolChain-$(cat $CWD/BSTAMP).exe should be in the $CWD/Output Directory
	
"
}

if [ $# -ne 1 ] ; then
	warn_user "Invalid args, need <all|get_pre_reqs|buildpkg|clean|realclean>"
fi

case "$1" in
	all) 
	dl_binutils
	dl_gcc
	dl_newlib
	download_win32
	build_toolchain 
	add_win32_pkgs
	build_win32_pkg
	done_all
	;;
	get_pre_reqs)
	dl_binutils
	dl_gcc
	dl_newlib
	download_win32
	;;
	get_binutils)
	dl_binutils
	;;
	get_gcc)
	dl_gcc
	;;
	get_newlib)
	dl_newlib
	;;
	buildpkg)
	download_win32
	add_win32_pkgs
	build_win32_pkg
	;;
	clean)
	cleanup
	;;
	realclean)
	full_cleanup
	;;
	*)
	warn_user "Invalid args, need <all|get_pre_reqs|buildpkg|clean|realclean>"
	;;
esac
