#!/bin/bash 
#
# Making mc9s12x Crosstools for windows from linux:
#
# David J. Andruczyk, 2010-2015
#
# This REQUIRES that you have build-essential and the mingw-w64 cross-compiler
# toolchains installed (SEE README)
#

# ADJUST THIS TO SUIT
# NOTE: you'll also need to edit mc9s12x-toolchain.iss to suite your 
# wine configuration and target paths, if you use "all" or "buildpkg"

#set -x

CWD=$(pwd)
PROCS=`cat /proc/cpuinfo |grep -c ^processor`
BINUTILS_URI="http://ftp.gnu.org/gnu/binutils"
BINUTILS_TAR="binutils-2.25.tar.bz2"
BINUTILS_DIR="binutils-2.25"
BINUTILS_PATCH="tc-m68hc11.patch"
GCC_URI="http://www.netgull.com/gcc/releases/gcc-3.3.6"
GCC_TAR="gcc-3.3.6.tar.bz2"
GCC_DIR="gcc-3.3.6"
GCC_PATCH_1="config.gcc.patch"
GCC_PATCH_2="seank_rollup_20131231.patch"
NEWLIB_DIR="s12x-newlib"
NEWLIB_GIT_URL="http://gitlab.com/libreems-suite/s12x-newlib.git"

SRCDIR="${CWD}/sources"
PATCH_DIR="${CWD}/patches"

HOST_ARCH=`uname -m`
SUFFIX="w64-mingw32"

function warn_user {
echo ""
echo $*
echo ""
export PATH=${ORIG_PATH}
exit -1
}

if [ $# -ne 2 ] ; then
	warn_user "Invalid args, need <32|64> <all|get_pre_reqs|buildpkg|clean|realclean>"
else
    if [ ${1} -eq 32 -o ${1} -eq 64 ] ; then
        BITS=$1
        BUILDDIR=${CWD}/build${BITS}
		DSTDIR=${CWD}/toolchain${BITS}
		if [ ${1} -eq 32 ] ; then
			if [ ! -f /opt/mingw32/bin/i686-w64-mingw32-gcc ] ; then
				echo "You don't have mingw installed at /opt/mingw32, see README"
				exit 1
			else
				ORIG_PATH=${PATH}
				export PATH=/opt/mingw32/bin:${PATH}
				TARGET_ARCH="i686"
			fi
		fi
		if [ ${1} -eq 64 ] ; then
			if [ ! -f /opt/mingw64/bin/x86_64-w64-mingw32-gcc ] ; then
				echo "You don't have mingw installed at /opt/mingw64, see README"
				exit 1
			else
				ORIG_PATH=${PATH}
				export PATH=/opt/mingw64/bin:${PATH}
				TARGET_ARCH="x86_64"
			fi
		fi
        echo "Target arch chosen is $1"
    else
        echo "Invalid args, expected [32|64] for 32 or 64 bit TARGET"
        exit -1
    fi
fi

# Additonal Packages needed to be added..
PKGS="gawk-3.1.6-1-bin.zip bc-1.06-2-bin.zip bc-1.06-2-dep.zip coreutils-5.3.0-bin.zip coreutils-5.3.0-dep.zip make-3.81-bin.zip zlib-1.2.3-bin.zip libintl-0.14.4-bin.zip which-2.20-bin.zip"


function setup {
if [ ! -d ${BUILDDIR} ] ; then
	mkdir ${BUILDDIR}
fi
if [ ! -d ${SRCDIR}/support ] ; then
	mkdir -p ${SRCDIR}/support
fi
}

function build_s12x_binutils_direct {
pushd ${BUILDDIR} >/dev/null
# Make sure we don't have cross vars set to begin with
# Setup crosscompile env vars:
# First: build binutils for 9s12x
if [ -f binutils-mc9s12x-direct-build/GOOD ] ; then
	return 0
fi
if [ -d binutils-mc9s12x-direct-build ] ; then
	rm -rf binutils-mc9s12x-direct-build
fi
mkdir binutils-mc9s12x-direct-build 
pushd binutils-mc9s12x-direct-build >/dev/null
# GCC needs a direct linux->m68hc11 assembler for its canadian cross
# intermediary compiler, so we need to build binutils twice, once for 
# Linux->m68hc11, and once as a crossbuild win32->m68hc11
# First linux->m68hc11
${SRCDIR}/${BINUTILS_DIR}/configure --target=m68hc11 --enable-targets=m68hc11,m68hc12,xgate --program-prefix=mc9s12x- --disable-nls --prefix=${DSTDIR}/intermediary/usr && \
CFLAGS+=-g make -j${PROCS} && \
make install && \
for i in addr2line ar as c++filt elfedit gprof ld.bfd ld nm objcopy objdump ranlib readelf size strings strip ; do \
	ln -s mc9s12x-$i ${DSTDIR}/intermediary/usr/bin/m68hc11-$i
done && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/binutils-mc9s12x-direct-build/GOOD
	return 0
else
	return $?
fi
}

function build_s12x_binutils_cross {
# Now enable cross compile env vars and build the windows binaries
pushd ${BUILDDIR} >/dev/null
if [ -f binutils-mc9s12x-cross-build/GOOD ] ; then
	return 0
fi
if [ -d binutils-mc9s12x-cross-build ] ; then
	rm -rf binutils-mc9s12x-cross-build
fi
mkdir binutils-mc9s12x-cross-build 
pushd binutils-mc9s12x-cross-build >/dev/null
${SRCDIR}/${BINUTILS_DIR}/configure --host=${TARGET_ARCH}-${SUFFIX} --target=m68hc11 --enable-targets=m68hc11,m68hc12,xgate --disable-nls  --program-prefix=mc9s12x- --prefix=/usr && \
make -j${PROCS} && \
DESTDIR=${DSTDIR} make install && \
for i in addr2line ar as c++filt elfedit gprof ld.bfd ld nm objcopy objdump ranlib readelf size strings strip ; do \
	ln -s mc9s12x-$i.exe ${DSTDIR}/usr/bin/m68hc11-$i.exe
	ln -s mc9s12x-$i.exe ${DSTDIR}/usr/bin/m68hc12-$i.exe
done && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/binutils-mc9s12x-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_xgate_binutils_cross {
# Make Xgate version, no need to make intermediary for xgate as there is NOT
# yet a GCC for xgate
pushd ${BUILDDIR} >/dev/null
if [ -f binutils-xgate-cross-build/GOOD ] ; then
	return 0
fi
if [ -d binutils-xgate-cross-build ] ; then
	rm -rf binutils-xgate-cross-build
fi
mkdir binutils-xgate-cross-build
pushd binutils-xgate-cross-build >/dev/null
${SRCDIR}/${BINUTILS_DIR}/configure --host=${TARGET_ARCH}-${SUFFIX} --target=xgate --enable-targets=m68hc11,m68hc12,xgate --program-prefix=xgate- --disable-nls --prefix=/usr && \
make -j${PROCS} && \
DESTDIR=${DSTDIR} make install && \
popd >/dev/null && \
popd >/dev/null 
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/binutils-xgate-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_intermediary_gcc {
pushd ${BUILDDIR} >/dev/null
if [ -f gcc-intermediary-build/GOOD ] ; then
	return 0
fi
if [ -d gcc-intermediary-build ] ; then
	rm -rf gcc-intermediary-build
fi
mkdir gcc-intermediary-build
pushd gcc-intermediary-build >/dev/null
OLDPATH=${PATH}
export PATH=${DSTDIR}/intermediary/usr/bin:${PATH}
# GCC needs to be done twice.  Once as a native linux->m68hc11 compiler, and 
# then as a cross compiled win32->m68hc11 compiler, which depends on the 
# intermediary one being present, so build that one first
${SRCDIR}/${GCC_DIR}/configure --target=m68hc11 --program-prefix=mc9s12x- --disable-nls --with-gnu-as --with-gnu-ld --disable-checking --without-headers --enable-languages=c --prefix=${DSTDIR}/intermediary/usr && \
make -j${PROCS} &&
make install && \
mv ${DSTDIR}/intermediary/usr/bin/m68hc11-gcc ${DSTDIR}/intermediary/usr/bin/mc9s12x-gcc && \
mv ${DSTDIR}/intermediary/usr/bin/m68hc11-cpp ${DSTDIR}/intermediary/usr/bin/mc9s12x-cpp && \
for i in gcc cpp gcov ; do \
	ln -s mc9s12x-$i ${DSTDIR}/intermediary/usr/bin/m68hc11-$i
	ln -s mc9s12x-$i ${DSTDIR}/intermediary/usr/bin/m68hc12-$i
done && \
rm -f ${DSTDIR}/intermediary/usr/bin/m68hc11-gcc-3.3.6* && \
export PATH=${OLDPATH} && \
popd >/dev/null && \
popd >/dev/null 
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/gcc-intermediary-build/GOOD
	return 0
else
	return $?
fi
}

function build_cross_gcc {
pushd ${BUILDDIR} >/dev/null
if [ -f gcc-cross-build/GOOD ] ; then
	return 0
fi
if [ -d gcc-cross-build ] ; then
	rm -rf gcc-cross-build
fi
mkdir gcc-cross-build
pushd gcc-cross-build >/dev/null
# GCC needs to be done twice.  Once as a native linux->m68hc11 compiler, and 
# then as a cross compiled win32->m68hc11 compiler, which depends on the 
# intermediary one being present, so build that one first
OLDPATH=${PATH}
export PATH=${DSTDIR}/intermediary/usr/bin:${PATH}
${SRCDIR}/${GCC_DIR}/configure --build=${HOST_ARCH}-pc-linux-gnu --host=${TARGET_ARCH}-${SUFFIX} --target=m68hc11 --program-prefix=mc9s12x- --disable-nls  --without-headers --with-gnu-as --with-gnu-ld --disable-checking --enable-languages=c --prefix=/usr && \
make -j${PROCS} && \
DESTDIR=${DSTDIR} make install && \
if [ -f ${DSTDIR}/usr/bin/m68hc11-gcc.exe ] ; then
	mv ${DSTDIR}/usr/bin/m68hc11-gcc.exe ${DSTDIR}/usr/bin/mc9s12x-gcc.exe
fi && \
if [ -f ${DSTDIR}/usr/bin/m68hc11-cpp.exe ] ; then
	mv ${DSTDIR}/usr/bin/m68hc11-cpp.exe ${DSTDIR}/usr/bin/mc9s12x-cpp.exe
fi && \
if [ -f ${DSTDIR}/usr/bin/m68hc11-gcc-3.3.6-* ] ; then
	rm -f ${DSTDIR}/usr/bin/m68hc11-gcc-3.3.6-*
fi && \
rm -f ${DSTDIR}/usr/bin/*gccbug*
for i in cpp gcc gcov ; do \
	ln -s mc9s12x-$i.exe ${DSTDIR}/usr/bin/m68hc11-$i.exe
	ln -s mc9s12x-$i.exe ${DSTDIR}/usr/bin/m68hc12-$i.exe
done && \
export PATH=${OLDPATH} && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/gcc-cross-build/GOOD
	return 0
else
	return $?
fi
}

function build_direct_newlib {
#Now newlib
#RESET ENV VARS back to normal, as newlib sets things up its own way
pushd ${BUILDDIR} >/dev/null
if [ -f newlib-build/GOOD ] ; then
	return 0
fi
if [ -d newlib-build ] ; then
	rm -rf newlib-build
fi
OLDPATH=${PATH}
export PATH=${DSTDIR}/intermediary/usr/bin:${PATH}
echo "Path is ${PATH}"
mkdir newlib-build
pushd newlib-build >/dev/null && \
${SRCDIR}/${NEWLIB_DIR}/src/configure --host=${TARGET_ARCH}-${SUFFIX} --target=m68hc11 --disable-multilib --disable-shared --disable-threads --disable-nls --prefix=/usr && \
make -j${PROCS} && \
DESTDIR=${DSTDIR} make install && \
export PATH=${OLDPATH} && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
	touch ${BUILDDIR}/newlib-build/GOOD
	return 0
else
	return $?
fi
}


function build_toolchain {
# Make a clean TARGET location to stick everything
if [ ! -d ${DSTDIR} ]; then
	mkdir ${DSTDIR}
else
	echo "${DSTDIR} ALREADY EXISTS, this may not be what you want!!!"
	for i in `seq 5 -1 1` ; do echo -n "." ; sleep 1 ; done ; echo ""
fi
echo "Target is ${DSTDIR}"
build_s12x_binutils_direct
res=$?
binutils_direct_mc9s12x_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure directly compiling mc9s12x binutils, result code %i\n" $res)
fi
build_s12x_binutils_cross
res=$?
binutils_cross_mc9s12x_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling mc9s12x binutils, result code %i\n" $res)
fi
build_xgate_binutils_cross
res=$?
binutils_cross_xgate_res=$res
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling xgate binutils, result code %i\n" $res)
fi

build_intermediary_gcc
res=$?
gcc_direct_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure direct compiling intermediary GCC for canadian cross, result code %i\n" $res)
fi

build_cross_gcc
res=$?
gcc_cross_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure cross compiling GCC, result code %i\n" $res)
fi

build_direct_newlib
res=$?
newlib_direct_res=$?
if [ $res -ne 0 ] ; then
	warn_user $(printf "\b\nFailure direct compiling newlib, result code %i\n" $res)
fi

echo "
	Compilation Results:
	Direct Binutils Linux->hc11: $binutils_direct_mc9s12x_res
	Cross Binutils Win32->hc11:  $binutils_cross_mc9s12x_res
	Cross Binutils Win32->xgate: $binutils_cross_xgate_res
	Direct GCC Linux->hc11:      $gcc_direct_res
	Cross GCC Win32->hc11:       $gcc_cross_res
	Direct Newlib Linux->hc11:   $newlib_direct_res

		"

if [ $binutils_direct_mc9s12x_res -eq 0 ] && \
	[ $binutils_cross_mc9s12x_res -eq 0 ] && \
	[ $binutils_cross_xgate_res -eq 0 ] && \
	[ $gcc_direct_res -eq 0 ] && \
	[ $gcc_cross_res -eq 0 ] && \
	[ $newlib_direct_res -eq 0 ] ; then
	echo "Everything compiled OK, installing prepackaged windows binaries"
	add_win32_pkgs
fi
}

function cleanup {
	echo "Cleaning out build directories"
	clean_binutils_build_dir
	clean_gcc_build_dir
	clean_newlib_build_dir
	clean_dest_dir
	echo "All build dirs cleaned out"
}

function full_cleanup {
	echo "Cleaning out sources and build directories"
	clean_binutils_build_dir
	clean_gcc_build_dir
	clean_newlib_build_dir
	clean_zip_dir
	clean_gcc_source_dir
	clean_newlib_source_dir
	clean_binutils_source_dir
	clean_dest_dir
	rm -f ${CWD}/mc9s12x-toolchain.iss
	rm -f ${CWD}/BSTAMP
	echo "All source and build dirs cleaned out"
}

function download_win32 {
pushd ${SRCDIR}/support >/dev/null
echo "Downloading windows binaries from sourceforge"
if [ ! -f gawk-3.1.6-1-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/gawk/3.1.6-1/gawk-3.1.6-1-bin.zip/download -O gawk-3.1.6-1-bin.zip
fi
if [ ! -f bc-1.06-2-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/bc/1.06-2/bc-1.06-2-bin.zip/download -O bc-1.06-2-bin.zip
fi
if [ ! -f bc-1.06-2-dep.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/bc/1.06-2/bc-1.06-2-dep.zip/download -O bc-1.06-2-dep.zip
fi
if [ ! -f zlib-1.2.3-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-bin.zip/download -O zlib-1.2.3-bin.zip
fi
if [ ! -f coreutils-5.3.0-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/coreutils/5.3.0/coreutils-5.3.0-bin.zip/download -O coreutils-5.3.0-bin.zip
fi
if [ ! -f coreutils-5.3.0-dep.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/coreutils/5.3.0/coreutils-5.3.0-dep.zip/download -O coreutils-5.3.0-dep.zip
fi
if [ ! -f libintl-0.14.4-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/libintl/0.14.4/libintl-0.14.4-bin.zip/download -O libintl-0.14.4-bin.zip
fi
if [ ! -f make-3.81-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/make/3.81/make-3.81-bin.zip/download -O make-3.81-bin.zip
fi
if [ ! -f which-2.20-bin.zip ] ; then
	wget -cnv http://sourceforge.net/projects/gnuwin32/files/which/2.20/which-2.20-bin.zip/download -O which-2.20-bin.zip
fi
echo "Complete!"
popd >/dev/null
}

function clean_binutils_build_dir {
if [ -d ${BUILDDIR} ] ; then
	pushd ${BUILDDIR} >/dev/null
	if [ -d binutils-mc9s12x-direct-build ] ; then
		rm -rf binutils-mc9s12x-direct-build
	fi
	if [ -d binutils-mc9s12x-cross-build ] ; then
		rm -rf binutils-mc9s12x-cross-build
	fi
	if [ -d binutils-xgate-cross-build ] ; then
		rm -rf binutils-xgate-cross-build
	fi
	popd >/dev/null
fi
}

function clean_binutils_source_dir {
pushd ${SRCDIR} >/dev/null
rm -rf ${BINUTILS_DIR}
rm -rf ${BINUTILS_TAR}
popd >/dev/null
}

function dl_binutils_sources {
# checkout seank's FreeScale-s12x-binutils
pushd ${SRCDIR} >/dev/null
md5sum --status -c ${BINUTILS_TAR}.md5
RESULT=$?
if [ ${RESULT} -ne 0 ] ; then
	echo "Aquiring binutils"
	wget -c  ${BINUTILS_URI}/${BINUTILS_TAR} -O ${BINUTILS_TAR}
fi && \
if [ ! -d ${BINUTILS_DIR} ] ; then
	tar xvf ${BINUTILS_TAR} && \
	pushd ${BINUTILS_DIR} >/dev/null && \
	patch -p1 < ${PATCH_DIR}/${BINUTILS_PATCH} &&\
	popd >/dev/null 
fi && \
popd >/dev/null 
}

function clean_gcc_build_dir {
if [ -d ${BUILDDIR} ] ; then
	pushd ${BUILDDIR} >/dev/null
	rm -rf gcc-*
	if [ -d gcc-intermediary-build ] ; then
		rm -rf gcc-intermediary-build
	fi
	if [ -d gcc-cross-build ] ; then
		rm -rf gcc-cross-build
	fi
	popd >/dev/null
fi
}

function clean_gcc_source_dir {
# checkout seank's repo for gcc
if [ -d ${SRCDIR} ] ; then
	pushd ${SRCDIR} >/dev/null
	rm -rf gcc-*
	rm -rf ${GCC_DIR}
	popd >/dev/null
fi
}

function dl_gcc_sources {
pushd ${SRCDIR} >/dev/null
wget -q -c ${GCC_URI}/md5.sum -O - |grep ${GCC_TAR} |md5sum --status -c -
if [ ${RESULT} -ne 0 ] ; then
	echo "Aquiring GCC"
	wget -c  ${GCC_URI}/${GCC_TAR} -O ${GCC_TAR}
fi && \
if [ ! -d ${GCC_DIR} ] ; then
	tar xvf ${GCC_TAR} && \
	if [ ! -f ${GCC_DIR}/.patched ] ; then
		pushd ${GCC_DIR} >/dev/null && \
	    patch -p2 < ${PATCH_DIR}/${GCC_PATCH_1} &&\
	    patch -p1 < ${PATCH_DIR}/${GCC_PATCH_2} &&\
		touch .patched
		popd >/dev/null
	fi
fi && \
popd >/dev/null
}

function clean_newlib_build_dir {
if [ -d ${BUILDDIR} ] ; then
	pushd ${BUILDDIR} >/dev/null
	# I used the sources from newlib-m68hc1x from ubuntu/debian
	if [ -d newlib-build ] ; then
		rm -rf newlib-build
	fi
	popd >/dev/null
fi
}

function clean_newlib_source_dir {
pushd ${SRCDIR} >/dev/null
	rm -rf ${NEWLIB_DIR}
popd >/dev/null
}

function clean_dest_dir {
rm -rf ${DSTDIR}
}

function dl_newlib_sources {
pushd ${SRCDIR} >/dev/null
if [ ! -d ${NEWLIB_DIR} ] ; then
    git clone ${NEWLIB_GIT_URL} ${NEWLIB_DIR}
else
	pushd ${NEWLIB_DIR} >/dev/null
	git pull
	popd >/dev/null
fi
popd >/dev/null
}

function clean_zip_dir {
rm -f ${SRCDIR}/support/*.zip
}

function add_win32_pkgs {
pushd ${DSTDIR}/usr >/dev/null
for pkg in `echo ${PKGS}` ; do
	unzip -o ${SRCDIR}/support/${pkg}
done
rm -rf contrib manifest
popd >/dev/null
}

function build_win32_pkg {
pushd ${CWD} >/dev/null
if [ -f mc9s12x-toolchain.iss ] ; then
	rm -f mc9s12x-toolchain.iss
fi
DEST=$(echo ${DSTDIR}/usr |sed -e 's/\//\\\\/g')
BSTAMP=`date +%Y-%m-%d`
MICRO=$(cat ${CWD}/MICRO)
sed -e s,_DSTDIR_,${DEST},g  -e s,_BSTAMP_,${BSTAMP},g -e s,_MICRO_,${MICRO},g < mc9s12x-toolchain${BITS}.iss.in > mc9s12x-toolchain${BITS}.iss
ISS_FILE=${CWD}/mc9s12x-toolchain${BITS}.iss

iscc ${ISS_FILE}
mv ${CWD}/Output/setup.exe ${CWD}/Output/mc9s12x-ToolChain_win${BITS}_${BSTAMP}.${MICRO}.exe
popd >/dev/null
}

function done_all {
	echo "

				ALL DONE!!!
mc9s12x-ToolChain_win${BITS}_${BSTAMP}.${MICRO}.exe should be in the ${CWD}/Output Directory
	
"
}

case ${2} in
	all) 
	setup
	dl_binutils_sources
	dl_gcc_sources
	dl_newlib_sources
	download_win32
	build_toolchain 
	add_win32_pkgs
	build_win32_pkg
	done_all
	;;
	cross_gcc)
	build_cross_gcc
	;;
	compile)
	build_toolchain
	;;
	get_pre_reqs)
	setup
	dl_binutils_sources
	dl_gcc_sources
	dl_newlib_sources
	download_win32
	;;
	get_binutils)
	dl_binutils_sources
	;;
	get_gcc)
	dl_gcc_sources
	;;
	get_newlib)
	dl_newlib_sources
	;;
	buildpkg)
	download_win32
	add_win32_pkgs
	build_win32_pkg
	;;
	clean)
	cleanup
	;;
	realclean)
	full_cleanup
	;;
	*)
	warn_user "Invalid args, need <32|64> <all|get_pre_reqs|buildpkg|clean|realclean>"
	;;
esac

export PATH=${ORIG_PATH}
